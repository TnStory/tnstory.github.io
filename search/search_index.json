{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to TnStory This is a personal record page, where I aim to analyze technology trends from a subjective perspective. \uad00\uc2ec \ubd84\uc57c Kubernetes AWS Architect GitOps CNCF SpringBoot AI","title":"Home"},{"location":"#welcome-to-tnstory","text":"This is a personal record page, where I aim to analyze technology trends from a subjective perspective.","title":"Welcome to TnStory"},{"location":"#_1","text":"Kubernetes AWS Architect GitOps CNCF SpringBoot AI","title":"\uad00\uc2ec \ubd84\uc57c"},{"location":"PoC/","text":"Proof of Concepts \uc544\ub798\ub294 \ub2e4\uc591\ud55c PoC(Proof of Concept) \ubb38\uc11c \ubaa8\uc74c\uc785\ub2c8\ub2e4. Kubernetes Service Discovery's Performance Benefits (2025/03/15) A performance comparison between external routing (via public DNS domain) and internal routing (via Kubernetes Service Discovery) in a microservice architecture. Docker Image Optimization Guide (2025/03/17) A comprehensive guide on Docker image optimization methods, including considerations for Java applications and third-party deployments.","title":"Overview"},{"location":"PoC/#proof-of-concepts","text":"\uc544\ub798\ub294 \ub2e4\uc591\ud55c PoC(Proof of Concept) \ubb38\uc11c \ubaa8\uc74c\uc785\ub2c8\ub2e4.","title":"Proof of Concepts"},{"location":"PoC/#kubernetes-service-discoverys-performance-benefits-20250315","text":"A performance comparison between external routing (via public DNS domain) and internal routing (via Kubernetes Service Discovery) in a microservice architecture.","title":"Kubernetes Service Discovery's Performance Benefits (2025/03/15)"},{"location":"PoC/#docker-image-optimization-guide-20250317","text":"A comprehensive guide on Docker image optimization methods, including considerations for Java applications and third-party deployments.","title":"Docker Image Optimization Guide (2025/03/17)"},{"location":"aboutme/","text":"About Me \uc9c4\uc815\ud55c DevSecOps\ub294 \uac1c\ubc1c \uccab \uc21c\uac04\ubd80\ud130 \uc2dc\uc791\ub41c\ub2e4. \uc5f0\ub77d\ucc98 \ud83d\udcde 010-3891-9041 \ud83d\udce7 lmb0724@gmail.com \uc790\uaca9\uc99d Certified Kubernetes Security Specialist (CKS) Cloud Native Computing Foundation (CNCF) Certified Kubernetes Application Developer (CKAD) Cloud Native Computing Foundation (CNCF) Certified Kubernetes Administrator (CKA) Cloud Native Computing Foundation (CNCF) AWS Certified Solutions Architect \u2013 Associate Amazon Web Services (AWS) \ub354 \uc790\uc138\ud55c \ub0b4\uc6a9\uc774\ub098 \ubb38\uc758\ub294 \uc704 \uc5f0\ub77d\ucc98\ub85c \uc5b8\uc81c\ub4e0 \uc5f0\ub77d\uc8fc\uc138\uc694!","title":"About Me"},{"location":"aboutme/#about-me","text":"\uc9c4\uc815\ud55c DevSecOps\ub294 \uac1c\ubc1c \uccab \uc21c\uac04\ubd80\ud130 \uc2dc\uc791\ub41c\ub2e4.","title":"About Me"},{"location":"aboutme/#_1","text":"\ud83d\udcde 010-3891-9041 \ud83d\udce7 lmb0724@gmail.com","title":"\uc5f0\ub77d\ucc98"},{"location":"aboutme/#_2","text":"Certified Kubernetes Security Specialist (CKS) Cloud Native Computing Foundation (CNCF) Certified Kubernetes Application Developer (CKAD) Cloud Native Computing Foundation (CNCF) Certified Kubernetes Administrator (CKA) Cloud Native Computing Foundation (CNCF) AWS Certified Solutions Architect \u2013 Associate Amazon Web Services (AWS) \ub354 \uc790\uc138\ud55c \ub0b4\uc6a9\uc774\ub098 \ubb38\uc758\ub294 \uc704 \uc5f0\ub77d\ucc98\ub85c \uc5b8\uc81c\ub4e0 \uc5f0\ub77d\uc8fc\uc138\uc694!","title":"\uc790\uaca9\uc99d"},{"location":"PoC/Docker_Image_Optimization_Guide/","text":"Docker Image Optimization Guide Docker image optimization and summarizes various methods to achieve it. It also covers the pros and cons of Gradle Jib and GraalVM for Java applications, along with considerations for deploying third-party applications. 1. Why Optimize? Faster Deployment: A smaller image size reduces network transfer time, thereby speeding up the overall deployment process. Enhanced Security: Removing unnecessary packages and files minimizes the attack surface. Resource Efficiency: Optimizing images reduces storage requirements and lowers memory usage during container execution. 2. Optimization Methods Use Minimal Base Images: Opt for lightweight base images such as Alpine or distroless. Multi-Stage Builds: Separate the build tools from the runtime environment to ensure that only the necessary files are included in the final image. Cache Optimization & Command Consolidation: Combine RUN commands to reduce the number of layers and efficiently utilize build cache. Remove Unnecessary Files: Delete temporary files and cache data after the build process. Use .dockerignore: Exclude unnecessary files from the build context to improve build speed. Utilize Docker Slim: Docker Slim analyzes your existing images and removes redundant files and configurations, significantly reducing the image size. Learn more 3. Java Application Optimization Gradle Jib Advantages: Enables container image creation directly from the Gradle build without the need for a Dockerfile. Leverages build cache to shorten image creation time and automatically optimizes image layers. Disadvantages: May be limited when extensive customization is required. Offers a higher level of abstraction compared to Dockerfiles, making granular control more challenging. Gradle Jib Plugin on GitHub GraalVM Advantages: Native image generation can dramatically improve application startup speed and reduce memory usage. Offers fast boot times and low runtime overhead. Disadvantages: Native image generation can be time-consuming and complicates the build process. Restrictions on dynamic features or reflection may require code modifications or additional configurations. GraalVM Official Website 4. Considerations for Deploying Third-Party Applications It is recommended to leverage the deployment methods and images provided by third parties. Attempting custom optimizations may have limited benefits while increasing complexity and deployment difficulty. Based on practical experience, it is more efficient to use the provided images as-is or with minimal modifications for third-party applications.","title":"Docker Image Optimization Guide"},{"location":"PoC/Docker_Image_Optimization_Guide/#docker-image-optimization-guide","text":"Docker image optimization and summarizes various methods to achieve it. It also covers the pros and cons of Gradle Jib and GraalVM for Java applications, along with considerations for deploying third-party applications.","title":"Docker Image Optimization Guide"},{"location":"PoC/Docker_Image_Optimization_Guide/#1-why-optimize","text":"Faster Deployment: A smaller image size reduces network transfer time, thereby speeding up the overall deployment process. Enhanced Security: Removing unnecessary packages and files minimizes the attack surface. Resource Efficiency: Optimizing images reduces storage requirements and lowers memory usage during container execution.","title":"1. Why Optimize?"},{"location":"PoC/Docker_Image_Optimization_Guide/#2-optimization-methods","text":"Use Minimal Base Images: Opt for lightweight base images such as Alpine or distroless. Multi-Stage Builds: Separate the build tools from the runtime environment to ensure that only the necessary files are included in the final image. Cache Optimization & Command Consolidation: Combine RUN commands to reduce the number of layers and efficiently utilize build cache. Remove Unnecessary Files: Delete temporary files and cache data after the build process. Use .dockerignore: Exclude unnecessary files from the build context to improve build speed. Utilize Docker Slim: Docker Slim analyzes your existing images and removes redundant files and configurations, significantly reducing the image size. Learn more","title":"2. Optimization Methods"},{"location":"PoC/Docker_Image_Optimization_Guide/#3-java-application-optimization","text":"","title":"3. Java Application Optimization"},{"location":"PoC/Docker_Image_Optimization_Guide/#gradle-jib","text":"Advantages: Enables container image creation directly from the Gradle build without the need for a Dockerfile. Leverages build cache to shorten image creation time and automatically optimizes image layers. Disadvantages: May be limited when extensive customization is required. Offers a higher level of abstraction compared to Dockerfiles, making granular control more challenging. Gradle Jib Plugin on GitHub","title":"Gradle Jib"},{"location":"PoC/Docker_Image_Optimization_Guide/#graalvm","text":"Advantages: Native image generation can dramatically improve application startup speed and reduce memory usage. Offers fast boot times and low runtime overhead. Disadvantages: Native image generation can be time-consuming and complicates the build process. Restrictions on dynamic features or reflection may require code modifications or additional configurations. GraalVM Official Website","title":"GraalVM"},{"location":"PoC/Docker_Image_Optimization_Guide/#4-considerations-for-deploying-third-party-applications","text":"It is recommended to leverage the deployment methods and images provided by third parties. Attempting custom optimizations may have limited benefits while increasing complexity and deployment difficulty. Based on practical experience, it is more efficient to use the provided images as-is or with minimal modifications for third-party applications.","title":"4. Considerations for Deploying Third-Party Applications"},{"location":"PoC/Kubernetes_ServiceDiscovery_Performance_PoC/","text":"Kubernetes Service Discovery's benefit [2025/03/15] PoC - Service Discovery\ub97c \uc0ac\uc6a9\ud558\uc5ec \ud2b8\ud328\ub9ad/\ube44\uc6a9 \uc774\uc810\uc744 \uac80\uc99d\ud574 \ubcf8\ub2e4. - MicroService\uac04 \ud1b5\uc2e0\uc2dc Istio(Service Mesh),gRPC \ub4f1\uc744 \uc0ac\uc6a9\ud558\ub294 \ud658\uacbd\uc5d0\uc11c \ub2f9\uc5f0\ud788 \uc0ac\uc6a9\ud574\uc57c \ud558\ub294 Item\uc774\uc9c0\ub9cc, \uc2e4\ubb34\uc5d0\uc11c\ub294 \ub9ce\uc774 \ub193\uce58\uace0 \uc788\ub294 \uc2e4\uc815\uc778\uac83 \uac19\ub2e4. Test Server Spec - AWS EKS Cluster(t3.medium) ```CMS Server Pod Deployment Spec resources: requests: cpu: 1 memory: \"1G\" limits: cpu: 1 memory: \"1G\" ``` ```next.js Server Pod Deployment Spec resources: requests: cpu: 200m memory: 512Mi limits: cpu: 500m memory: 728Mi ``` S/W install in next.js server pod wget https://hey-release.s3.us-east-2.amazonaws.com/hey_linux_amd64 -O hey chmod +x hey ./hey -n 50 -c 3 http://localhost:3000/cms-api-endpoint EKS (next.js pod --> cms pod --> AWS RDS ) Env DNS : Route53 Use AWS ALB TC - TC1 : next.js --> public dns domain --> cms pod // external routing http://cms.server.com - TC2 : next.js --> Service Discovery --> cms pod // internal routing http://cms-service.namespace.svc.cluster.local // http://craftcms.easytask.svc.cluster.local TC1 \ud638\ucd9c \ud750\ub984 (\uc678\ubd80 \ub77c\uc6b0\ud305) flowchart TD subgraph \"EKS Cluster\" subgraph \"Next.js Pod\" next[Next.js Server] style next fill:#1E88E5,stroke:#0D47A1,color:white end subgraph \"CMS Pod\" cms[CMS Server] style cms fill:#43A047,stroke:#2E7D32,color:white end end subgraph \"AWS Services\" route53[Route53\\nDNS] style route53 fill:#FF9900,stroke:#FF8000,color:black alb[AWS ALB] style alb fill:#FF9900,stroke:#FF8000,color:black rds[(AWS RDS)] style rds fill:#FF9900,stroke:#FF8000,color:black end next -->|1. API \uc694\uccad\\nhttp://cms.server.com| route53 route53 -->|2. DNS \ud655\uc778| next next -->|3. \uc694\uccad| alb alb -->|4. \ub77c\uc6b0\ud305| cms cms -->|5. \ub370\uc774\ud130 \ucffc\ub9ac| rds rds -->|6. \uc751\ub2f5| cms cms -->|7. \uc751\ub2f5| alb alb -->|8. \uc751\ub2f5| next classDef aws fill:#FF9900,stroke:#FF8000,color:black; classDef k8s fill:#326CE5,stroke:#2350BD,color:white; class route53,alb,rds aws; class next,cms k8s; TC2 \ud638\ucd9c \ud750\ub984 (\ub0b4\ubd80 \ub77c\uc6b0\ud305) flowchart TD subgraph \"EKS Cluster\" subgraph \"Next.js Pod\" next[Next.js Server] style next fill:#1E88E5,stroke:#0D47A1,color:white end k8ssd[Kubernetes\\nService Discovery] style k8ssd fill:#326CE5,stroke:#2350BD,color:white subgraph \"CMS Pod\" cms[CMS Server] style cms fill:#43A047,stroke:#2E7D32,color:white end end subgraph \"AWS Services\" rds[(AWS RDS)] style rds fill:#FF9900,stroke:#FF8000,color:black end next -->|1. API \uc694\uccad\\nhttp://cms-service.namespace.svc.cluster.local| k8ssd k8ssd -->|2. \uc11c\ube44\uc2a4 \ud655\uc778| next next -->|3. \uc9c1\uc811 \uc694\uccad| cms cms -->|4. \ub370\uc774\ud130 \ucffc\ub9ac| rds rds -->|5. \uc751\ub2f5| cms cms -->|6. \uc751\ub2f5| next classDef aws fill:#FF9900,stroke:#FF8000,color:black; classDef k8s fill:#326CE5,stroke:#2350BD,color:white; class rds aws; class next,cms,k8ssd k8s; TC1-1 : external routing ./hey -n 50 -c 3 http://localhost:3000/cms-api-endpoint Summary: Total: 23.0148 secs Slowest: 2.4150 secs Fastest: 0.8270 secs Average: 1.4285 secs Requests/sec: 2.0856 Response time histogram: 0.827 [1] |\u25a0\u25a0\u25a0 0.986 [1] |\u25a0\u25a0\u25a0 1.145 [7] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 1.303 [12] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 1.462 [8] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 1.621 [7] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 1.780 [7] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 1.939 [1] |\u25a0\u25a0\u25a0 2.097 [3] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 2.256 [0] | 2.415 [1] |\u25a0\u25a0\u25a0 Latency distribution: 10% in 1.0986 secs 25% in 1.2369 secs 50% in 1.4086 secs 75% in 1.6216 secs 90% in 2.0125 secs 95% in 2.0791 secs 0% in 0.0000 secs Details (average, fastest, slowest): DNS+dialup: 0.0001 secs, 0.8270 secs, 2.4150 secs DNS-lookup: 0.0000 secs, 0.0000 secs, 0.0008 secs req write: 0.0000 secs, 0.0000 secs, 0.0003 secs resp wait: 1.3812 secs, 0.8249 secs, 2.1124 secs resp read: 0.0472 secs, 0.0016 secs, 0.3786 secs Status code distribution: [200] 48 responses ./hey -n 50 -c 3 http://localhost:3000/cms-api-endpoint Summary: Total: 23.3135 secs Slowest: 2.3849 secs Fastest: 0.6418 secs Average: 1.4337 secs Requests/sec: 2.0589 Response time histogram: 0.642 [1] |\u25a0\u25a0 0.816 [0] | 0.990 [1] |\u25a0\u25a0 1.165 [6] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 1.339 [10] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 1.513 [17] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 1.688 [4] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 1.862 [5] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 2.036 [1] |\u25a0\u25a0 2.211 [2] |\u25a0\u25a0\u25a0\u25a0\u25a0 2.385 [1] |\u25a0\u25a0 Latency distribution: 10% in 1.1443 secs 25% in 1.2131 secs 50% in 1.4042 secs 75% in 1.5631 secs 90% in 1.9996 secs 95% in 2.1962 secs 0% in 0.0000 secs Details (average, fastest, slowest): DNS+dialup: 0.0003 secs, 0.6418 secs, 2.3849 secs DNS-lookup: 0.0000 secs, 0.0000 secs, 0.0004 secs req write: 0.0001 secs, 0.0000 secs, 0.0056 secs resp wait: 1.3728 secs, 0.6354 secs, 2.3065 secs resp read: 0.0602 secs, 0.0015 secs, 0.4777 secs Status code distribution: [200] 48 responses ./hey -n 50 -c 3 http://localhost:3000/cms-api-endpoint Summary: Total: 22.6327 secs Slowest: 2.1081 secs Fastest: 1.0684 secs Average: 1.3994 secs Requests/sec: 2.1208 Response time histogram: 1.068 [1] |\u25a0\u25a0\u25a0\u25a0 1.172 [11] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 1.276 [9] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 1.380 [6] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 1.484 [1] |\u25a0\u25a0\u25a0\u25a0 1.588 [10] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 1.692 [5] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 1.796 [1] |\u25a0\u25a0\u25a0\u25a0 1.900 [1] |\u25a0\u25a0\u25a0\u25a0 2.004 [1] |\u25a0\u25a0\u25a0\u25a0 2.108 [2] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 Latency distribution: 10% in 1.1136 secs 25% in 1.1859 secs 50% in 1.3722 secs 75% in 1.5662 secs 90% in 1.8879 secs 95% in 2.0226 secs 0% in 0.0000 secs Details (average, fastest, slowest): DNS+dialup: 0.0000 secs, 1.0684 secs, 2.1081 secs DNS-lookup: 0.0000 secs, 0.0000 secs, 0.0012 secs req write: 0.0000 secs, 0.0000 secs, 0.0001 secs resp wait: 1.3629 secs, 1.0391 secs, 2.0026 secs resp read: 0.0364 secs, 0.0017 secs, 0.2389 secs Status code distribution: [200] 48 responses TC2 : internal routing ./hey -n 50 -c 3 http://localhost:3000/cms-api-endpoint Summary: Total: 20.8464 secs Slowest: 2.0879 secs Fastest: 0.6937 secs Average: 1.2629 secs Requests/sec: 2.3026 Response time histogram: 0.694 [1] |\u25a0\u25a0 0.833 [0] | 0.973 [1] |\u25a0\u25a0 1.112 [9] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 1.251 [18] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 1.391 [8] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 1.530 [5] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 1.670 [3] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 1.809 [0] | 1.948 [1] |\u25a0\u25a0 2.088 [2] |\u25a0\u25a0\u25a0\u25a0 Latency distribution: 10% in 1.0148 secs 25% in 1.1220 secs 50% in 1.2114 secs 75% in 1.3546 secs 90% in 1.6184 secs 95% in 2.0818 secs 0% in 0.0000 secs Details (average, fastest, slowest): DNS+dialup: 0.0000 secs, 0.6937 secs, 2.0879 secs DNS-lookup: 0.0000 secs, 0.0000 secs, 0.0004 secs req write: 0.0000 secs, 0.0000 secs, 0.0002 secs resp wait: 1.2377 secs, 0.6902 secs, 2.0801 secs resp read: 0.0251 secs, 0.0012 secs, 0.3755 secs Status code distribution: [200] 48 responses ./hey -n 50 -c 3 http://localhost:3000/cms-api-endpoint Summary: Total: 19.5824 secs Slowest: 1.9950 secs Fastest: 0.6106 secs Average: 1.2080 secs Requests/sec: 2.4512 Response time histogram: 0.611 [1] |\u25a0\u25a0\u25a0 0.749 [0] | 0.887 [2] |\u25a0\u25a0\u25a0\u25a0\u25a0 1.026 [6] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 1.164 [15] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 1.303 [13] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 1.441 [4] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 1.580 [3] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 1.718 [2] |\u25a0\u25a0\u25a0\u25a0\u25a0 1.857 [0] | 1.995 [2] |\u25a0\u25a0\u25a0\u25a0\u25a0 Latency distribution: 10% in 0.9748 secs 25% in 1.0636 secs 50% in 1.1740 secs 75% in 1.3019 secs 90% in 1.6464 secs 95% in 1.9126 secs 0% in 0.0000 secs Details (average, fastest, slowest): DNS+dialup: 0.0000 secs, 0.6106 secs, 1.9950 secs DNS-lookup: 0.0000 secs, 0.0000 secs, 0.0003 secs req write: 0.0000 secs, 0.0000 secs, 0.0001 secs resp wait: 1.1801 secs, 0.6088 secs, 1.9930 secs resp read: 0.0278 secs, 0.0015 secs, 0.2773 secs Status code distribution: [200] 48 responses ./hey -n 50 -c 3 http://localhost:3000/cms-api-endpoint Summary: Total: 20.0755 secs Slowest: 2.0698 secs Fastest: 0.6925 secs Average: 1.2348 secs Requests/sec: 2.3910 Response time histogram: 0.693 [1] |\u25a0\u25a0\u25a0 0.830 [0] | 0.968 [3] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 1.106 [12] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 1.243 [11] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 1.381 [10] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 1.519 [7] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 1.657 [1] |\u25a0\u25a0\u25a0 1.794 [1] |\u25a0\u25a0\u25a0 1.932 [0] | 2.070 [2] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 Latency distribution: 10% in 0.9806 secs 25% in 1.0984 secs 50% in 1.2104 secs 75% in 1.3768 secs 90% in 1.6011 secs 95% in 1.9678 secs 0% in 0.0000 secs Details (average, fastest, slowest): DNS+dialup: 0.0001 secs, 0.6925 secs, 2.0698 secs DNS-lookup: 0.0001 secs, 0.0000 secs, 0.0015 secs req write: 0.0000 secs, 0.0000 secs, 0.0004 secs resp wait: 1.2001 secs, 0.6906 secs, 2.0635 secs resp read: 0.0345 secs, 0.0014 secs, 0.4255 secs Status code distribution: [200] 48 responses Conclusion TC1 (External Routing) In each execution, the average response time is approximately 1.40 seconds. The total number of requests (48 responses) and the requests per second (about 2.08 to 2.12) remain consistent. The response time histogram shows the fastest response at around 0.64 seconds, with the slowest reaching near 2.4 seconds, indicating some variability. Additional overhead may be present in DNS handling and connection setup. TC2 (Internal Routing) The average response time improves to approximately 1.21\u20131.26 seconds. The requests per second improve slightly to around 2.30\u20132.45. The response time distribution is more uniform and the maximum latency is marginally lower (around 2.0 seconds). Reduced DNS lookups and lower network hops in internal communication contribute to this performance gain. Conclusion: Internal routing (TC2) shows modest improvements over external routing (TC1) in both response times and throughput, which can positively impact the overall user experience in real-time service environments.","title":"Kubernetes Service Discovery Performance"},{"location":"PoC/Kubernetes_ServiceDiscovery_Performance_PoC/#kubernetes-service-discoverys-benefit-20250315","text":"","title":"Kubernetes Service Discovery's benefit [2025/03/15]"},{"location":"PoC/Kubernetes_ServiceDiscovery_Performance_PoC/#poc","text":"- Service Discovery\ub97c \uc0ac\uc6a9\ud558\uc5ec \ud2b8\ud328\ub9ad/\ube44\uc6a9 \uc774\uc810\uc744 \uac80\uc99d\ud574 \ubcf8\ub2e4. - MicroService\uac04 \ud1b5\uc2e0\uc2dc Istio(Service Mesh),gRPC \ub4f1\uc744 \uc0ac\uc6a9\ud558\ub294 \ud658\uacbd\uc5d0\uc11c \ub2f9\uc5f0\ud788 \uc0ac\uc6a9\ud574\uc57c \ud558\ub294 Item\uc774\uc9c0\ub9cc, \uc2e4\ubb34\uc5d0\uc11c\ub294 \ub9ce\uc774 \ub193\uce58\uace0 \uc788\ub294 \uc2e4\uc815\uc778\uac83 \uac19\ub2e4.","title":"PoC"},{"location":"PoC/Kubernetes_ServiceDiscovery_Performance_PoC/#test-server-spec","text":"- AWS EKS Cluster(t3.medium) ```CMS Server Pod Deployment Spec resources: requests: cpu: 1 memory: \"1G\" limits: cpu: 1 memory: \"1G\" ``` ```next.js Server Pod Deployment Spec resources: requests: cpu: 200m memory: 512Mi limits: cpu: 500m memory: 728Mi ```","title":"Test Server Spec"},{"location":"PoC/Kubernetes_ServiceDiscovery_Performance_PoC/#sw-install-in-nextjs-server-pod","text":"wget https://hey-release.s3.us-east-2.amazonaws.com/hey_linux_amd64 -O hey chmod +x hey ./hey -n 50 -c 3 http://localhost:3000/cms-api-endpoint","title":"S/W install in next.js server pod"},{"location":"PoC/Kubernetes_ServiceDiscovery_Performance_PoC/#eks-nextjs-pod-cms-pod-aws-rds-env","text":"DNS : Route53 Use AWS ALB","title":"EKS (next.js pod --&gt; cms pod --&gt; AWS RDS ) Env"},{"location":"PoC/Kubernetes_ServiceDiscovery_Performance_PoC/#tc","text":"- TC1 : next.js --> public dns domain --> cms pod // external routing http://cms.server.com - TC2 : next.js --> Service Discovery --> cms pod // internal routing http://cms-service.namespace.svc.cluster.local // http://craftcms.easytask.svc.cluster.local","title":"TC"},{"location":"PoC/Kubernetes_ServiceDiscovery_Performance_PoC/#tc1","text":"flowchart TD subgraph \"EKS Cluster\" subgraph \"Next.js Pod\" next[Next.js Server] style next fill:#1E88E5,stroke:#0D47A1,color:white end subgraph \"CMS Pod\" cms[CMS Server] style cms fill:#43A047,stroke:#2E7D32,color:white end end subgraph \"AWS Services\" route53[Route53\\nDNS] style route53 fill:#FF9900,stroke:#FF8000,color:black alb[AWS ALB] style alb fill:#FF9900,stroke:#FF8000,color:black rds[(AWS RDS)] style rds fill:#FF9900,stroke:#FF8000,color:black end next -->|1. API \uc694\uccad\\nhttp://cms.server.com| route53 route53 -->|2. DNS \ud655\uc778| next next -->|3. \uc694\uccad| alb alb -->|4. \ub77c\uc6b0\ud305| cms cms -->|5. \ub370\uc774\ud130 \ucffc\ub9ac| rds rds -->|6. \uc751\ub2f5| cms cms -->|7. \uc751\ub2f5| alb alb -->|8. \uc751\ub2f5| next classDef aws fill:#FF9900,stroke:#FF8000,color:black; classDef k8s fill:#326CE5,stroke:#2350BD,color:white; class route53,alb,rds aws; class next,cms k8s;","title":"TC1 \ud638\ucd9c \ud750\ub984 (\uc678\ubd80 \ub77c\uc6b0\ud305)"},{"location":"PoC/Kubernetes_ServiceDiscovery_Performance_PoC/#tc2","text":"flowchart TD subgraph \"EKS Cluster\" subgraph \"Next.js Pod\" next[Next.js Server] style next fill:#1E88E5,stroke:#0D47A1,color:white end k8ssd[Kubernetes\\nService Discovery] style k8ssd fill:#326CE5,stroke:#2350BD,color:white subgraph \"CMS Pod\" cms[CMS Server] style cms fill:#43A047,stroke:#2E7D32,color:white end end subgraph \"AWS Services\" rds[(AWS RDS)] style rds fill:#FF9900,stroke:#FF8000,color:black end next -->|1. API \uc694\uccad\\nhttp://cms-service.namespace.svc.cluster.local| k8ssd k8ssd -->|2. \uc11c\ube44\uc2a4 \ud655\uc778| next next -->|3. \uc9c1\uc811 \uc694\uccad| cms cms -->|4. \ub370\uc774\ud130 \ucffc\ub9ac| rds rds -->|5. \uc751\ub2f5| cms cms -->|6. \uc751\ub2f5| next classDef aws fill:#FF9900,stroke:#FF8000,color:black; classDef k8s fill:#326CE5,stroke:#2350BD,color:white; class rds aws; class next,cms,k8ssd k8s;","title":"TC2 \ud638\ucd9c \ud750\ub984 (\ub0b4\ubd80 \ub77c\uc6b0\ud305)"},{"location":"PoC/Kubernetes_ServiceDiscovery_Performance_PoC/#tc1-1-external-routing","text":"./hey -n 50 -c 3 http://localhost:3000/cms-api-endpoint Summary: Total: 23.0148 secs Slowest: 2.4150 secs Fastest: 0.8270 secs Average: 1.4285 secs Requests/sec: 2.0856 Response time histogram: 0.827 [1] |\u25a0\u25a0\u25a0 0.986 [1] |\u25a0\u25a0\u25a0 1.145 [7] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 1.303 [12] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 1.462 [8] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 1.621 [7] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 1.780 [7] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 1.939 [1] |\u25a0\u25a0\u25a0 2.097 [3] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 2.256 [0] | 2.415 [1] |\u25a0\u25a0\u25a0 Latency distribution: 10% in 1.0986 secs 25% in 1.2369 secs 50% in 1.4086 secs 75% in 1.6216 secs 90% in 2.0125 secs 95% in 2.0791 secs 0% in 0.0000 secs Details (average, fastest, slowest): DNS+dialup: 0.0001 secs, 0.8270 secs, 2.4150 secs DNS-lookup: 0.0000 secs, 0.0000 secs, 0.0008 secs req write: 0.0000 secs, 0.0000 secs, 0.0003 secs resp wait: 1.3812 secs, 0.8249 secs, 2.1124 secs resp read: 0.0472 secs, 0.0016 secs, 0.3786 secs Status code distribution: [200] 48 responses ./hey -n 50 -c 3 http://localhost:3000/cms-api-endpoint Summary: Total: 23.3135 secs Slowest: 2.3849 secs Fastest: 0.6418 secs Average: 1.4337 secs Requests/sec: 2.0589 Response time histogram: 0.642 [1] |\u25a0\u25a0 0.816 [0] | 0.990 [1] |\u25a0\u25a0 1.165 [6] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 1.339 [10] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 1.513 [17] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 1.688 [4] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 1.862 [5] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 2.036 [1] |\u25a0\u25a0 2.211 [2] |\u25a0\u25a0\u25a0\u25a0\u25a0 2.385 [1] |\u25a0\u25a0 Latency distribution: 10% in 1.1443 secs 25% in 1.2131 secs 50% in 1.4042 secs 75% in 1.5631 secs 90% in 1.9996 secs 95% in 2.1962 secs 0% in 0.0000 secs Details (average, fastest, slowest): DNS+dialup: 0.0003 secs, 0.6418 secs, 2.3849 secs DNS-lookup: 0.0000 secs, 0.0000 secs, 0.0004 secs req write: 0.0001 secs, 0.0000 secs, 0.0056 secs resp wait: 1.3728 secs, 0.6354 secs, 2.3065 secs resp read: 0.0602 secs, 0.0015 secs, 0.4777 secs Status code distribution: [200] 48 responses ./hey -n 50 -c 3 http://localhost:3000/cms-api-endpoint Summary: Total: 22.6327 secs Slowest: 2.1081 secs Fastest: 1.0684 secs Average: 1.3994 secs Requests/sec: 2.1208 Response time histogram: 1.068 [1] |\u25a0\u25a0\u25a0\u25a0 1.172 [11] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 1.276 [9] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 1.380 [6] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 1.484 [1] |\u25a0\u25a0\u25a0\u25a0 1.588 [10] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 1.692 [5] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 1.796 [1] |\u25a0\u25a0\u25a0\u25a0 1.900 [1] |\u25a0\u25a0\u25a0\u25a0 2.004 [1] |\u25a0\u25a0\u25a0\u25a0 2.108 [2] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 Latency distribution: 10% in 1.1136 secs 25% in 1.1859 secs 50% in 1.3722 secs 75% in 1.5662 secs 90% in 1.8879 secs 95% in 2.0226 secs 0% in 0.0000 secs Details (average, fastest, slowest): DNS+dialup: 0.0000 secs, 1.0684 secs, 2.1081 secs DNS-lookup: 0.0000 secs, 0.0000 secs, 0.0012 secs req write: 0.0000 secs, 0.0000 secs, 0.0001 secs resp wait: 1.3629 secs, 1.0391 secs, 2.0026 secs resp read: 0.0364 secs, 0.0017 secs, 0.2389 secs Status code distribution: [200] 48 responses","title":"TC1-1 : external routing"},{"location":"PoC/Kubernetes_ServiceDiscovery_Performance_PoC/#tc2-internal-routing","text":"./hey -n 50 -c 3 http://localhost:3000/cms-api-endpoint Summary: Total: 20.8464 secs Slowest: 2.0879 secs Fastest: 0.6937 secs Average: 1.2629 secs Requests/sec: 2.3026 Response time histogram: 0.694 [1] |\u25a0\u25a0 0.833 [0] | 0.973 [1] |\u25a0\u25a0 1.112 [9] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 1.251 [18] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 1.391 [8] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 1.530 [5] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 1.670 [3] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 1.809 [0] | 1.948 [1] |\u25a0\u25a0 2.088 [2] |\u25a0\u25a0\u25a0\u25a0 Latency distribution: 10% in 1.0148 secs 25% in 1.1220 secs 50% in 1.2114 secs 75% in 1.3546 secs 90% in 1.6184 secs 95% in 2.0818 secs 0% in 0.0000 secs Details (average, fastest, slowest): DNS+dialup: 0.0000 secs, 0.6937 secs, 2.0879 secs DNS-lookup: 0.0000 secs, 0.0000 secs, 0.0004 secs req write: 0.0000 secs, 0.0000 secs, 0.0002 secs resp wait: 1.2377 secs, 0.6902 secs, 2.0801 secs resp read: 0.0251 secs, 0.0012 secs, 0.3755 secs Status code distribution: [200] 48 responses ./hey -n 50 -c 3 http://localhost:3000/cms-api-endpoint Summary: Total: 19.5824 secs Slowest: 1.9950 secs Fastest: 0.6106 secs Average: 1.2080 secs Requests/sec: 2.4512 Response time histogram: 0.611 [1] |\u25a0\u25a0\u25a0 0.749 [0] | 0.887 [2] |\u25a0\u25a0\u25a0\u25a0\u25a0 1.026 [6] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 1.164 [15] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 1.303 [13] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 1.441 [4] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 1.580 [3] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 1.718 [2] |\u25a0\u25a0\u25a0\u25a0\u25a0 1.857 [0] | 1.995 [2] |\u25a0\u25a0\u25a0\u25a0\u25a0 Latency distribution: 10% in 0.9748 secs 25% in 1.0636 secs 50% in 1.1740 secs 75% in 1.3019 secs 90% in 1.6464 secs 95% in 1.9126 secs 0% in 0.0000 secs Details (average, fastest, slowest): DNS+dialup: 0.0000 secs, 0.6106 secs, 1.9950 secs DNS-lookup: 0.0000 secs, 0.0000 secs, 0.0003 secs req write: 0.0000 secs, 0.0000 secs, 0.0001 secs resp wait: 1.1801 secs, 0.6088 secs, 1.9930 secs resp read: 0.0278 secs, 0.0015 secs, 0.2773 secs Status code distribution: [200] 48 responses ./hey -n 50 -c 3 http://localhost:3000/cms-api-endpoint Summary: Total: 20.0755 secs Slowest: 2.0698 secs Fastest: 0.6925 secs Average: 1.2348 secs Requests/sec: 2.3910 Response time histogram: 0.693 [1] |\u25a0\u25a0\u25a0 0.830 [0] | 0.968 [3] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 1.106 [12] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 1.243 [11] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 1.381 [10] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 1.519 [7] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 1.657 [1] |\u25a0\u25a0\u25a0 1.794 [1] |\u25a0\u25a0\u25a0 1.932 [0] | 2.070 [2] |\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0\u25a0 Latency distribution: 10% in 0.9806 secs 25% in 1.0984 secs 50% in 1.2104 secs 75% in 1.3768 secs 90% in 1.6011 secs 95% in 1.9678 secs 0% in 0.0000 secs Details (average, fastest, slowest): DNS+dialup: 0.0001 secs, 0.6925 secs, 2.0698 secs DNS-lookup: 0.0001 secs, 0.0000 secs, 0.0015 secs req write: 0.0000 secs, 0.0000 secs, 0.0004 secs resp wait: 1.2001 secs, 0.6906 secs, 2.0635 secs resp read: 0.0345 secs, 0.0014 secs, 0.4255 secs Status code distribution: [200] 48 responses","title":"TC2 : internal routing"},{"location":"PoC/Kubernetes_ServiceDiscovery_Performance_PoC/#conclusion","text":"TC1 (External Routing) In each execution, the average response time is approximately 1.40 seconds. The total number of requests (48 responses) and the requests per second (about 2.08 to 2.12) remain consistent. The response time histogram shows the fastest response at around 0.64 seconds, with the slowest reaching near 2.4 seconds, indicating some variability. Additional overhead may be present in DNS handling and connection setup. TC2 (Internal Routing) The average response time improves to approximately 1.21\u20131.26 seconds. The requests per second improve slightly to around 2.30\u20132.45. The response time distribution is more uniform and the maximum latency is marginally lower (around 2.0 seconds). Reduced DNS lookups and lower network hops in internal communication contribute to this performance gain. Conclusion: Internal routing (TC2) shows modest improvements over external routing (TC1) in both response times and throughput, which can positively impact the overall user experience in real-time service environments.","title":"Conclusion"}]}